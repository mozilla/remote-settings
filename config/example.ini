[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 8888


[app:main]
use = egg:kinto

#
# Features
#
kinto.experimental_permissions_endpoint = true
# kinto.readonly = false
# kinto.paginate_by = 0
kinto.experimental_collection_schema_validation = true
# kinto.trailing_slash_redirect_enabled = true
# kinto.batch_max_requests = 25
# kinto.version_json_path = ./version.json

#
# Production settings
#
# http://kinto.readthedocs.io/en/latest/configuration/production.html
#
# kinto.http_scheme = https
# kinto.http_host = kinto.services.mozilla.com

kinto.statsd_url = udp://localhost:8125
# kinto.statsd_prefix = kinto-prod

# kinto.retry_after_seconds = 5
# kinto.backoff = 10
# kinto.eos =

# Always return CORS headers
cornice.always_cors = true

#
# Backends.
#
# http://kinto.readthedocs.io/en/latest/configuration/settings.html#storage
#
kinto.storage_backend = kinto.core.storage.postgresql
kinto.storage_url = postgresql://admin:pass@localhost/dbname
# kinto.storage_pool_size = 25
# kinto.storage_max_overflow = 5
# kinto.storage_pool_recycle = -1
# kinto.storage_pool_timeout = 30
# kinto.storage_max_backlog = -1

kinto.cache_backend = kinto.core.cache.postgresql
kinto.cache_url = postgresql://admin:pass@localhost/dbname
# kinto.cache_pool_size = 25
# kinto.cache_max_overflow = 5
# kinto.cache_pool_recycle = -1
# kinto.cache_pool_timeout = 30
# kinto.cache_max_backlog = -1

kinto.permission_backend = kinto.core.permission.postgresql
kinto.permission_url = postgresql://admin:pass@localhost/dbname
# kinto.permission_pool_size = 25
# kinto.permission_max_overflow = 5
# kinto.permission_pool_recycle = -1
# kinto.permission_pool_timeout = 30
# kinto.permission_max_backlog = -1


#
# Auth configuration.
#
# http://kinto.readthedocs.io/en/latest/configuration/settings.html#authentication
#
kinto.userid_hmac_secret = 58de20af8811f56f52d24a6862d13c163b0ea353b0e2f23ea34aaccbef174ec8
multiauth.policies = account
multiauth.policy.account.use = kinto.plugins.accounts.authentication.AccountsAuthenticationPolicy

kinto.account_create_principals = system.Everyone
kinto.account_write_principals = account:admin


#
# Root permissions
#
# kinto.bucket_create_principals = system.Authenticated
# kinto.bucket_read_principals = system.Authenticated


#
# Client cache headers
#
# http://kinto.readthedocs.io/en/latest/configuration/settings.html#client-caching
#
# Every bucket objects objects and list
# kinto.bucket_cache_expires_seconds = 3600
#
# Every collection objects and list of every buckets
# kinto.collection_cache_expires_seconds = 3600
#
# Every group objects and list of every buckets
# kinto.group_cache_expires_seconds = 3600
#
# Every records objects and list of every collections
# kinto.record_cache_expires_seconds = 3600
#
# Records in a specific bucket
# kinto.blog_record_cache_expires_seconds = 3600
#
# Records in a specific collection in a specific bucket
# kinto.blog_article_record_cache_expires_seconds = 3600

kinto.project_name = Remote Settings

#
# Plugins
#
kinto.includes = kinto.plugins.default_bucket
                 kinto.plugins.history
                 kinto.plugins.admin
                 kinto.plugins.accounts
                 kinto.plugins.flush
                 kinto_remote_settings
                 kinto_emailer
                 kinto_attachment
#                kinto.plugins.quotas

#
# Kinto history
#
kinto.history.exclude_resources = /buckets/main-preview
                                  /buckets/main

#
# Kinto changes
#
kinto.changes.resources = /buckets/main-workspace
kinto.monitor.changes.record_cache_expires_seconds = 60

#
# Kinto attachment
#
kinto.attachment.base_url = http://localhost:8000
kinto.attachment.folder = {bucket_id}/{collection_id}
# Either local filesystem:
kinto.attachment.base_path = /tmp
# or Amazon S3:
# kinto.attachment.aws.access_key = <AWS access key>
# kinto.attachment.aws.secret_key = <AWS secret key>
# kinto.attachment.aws.bucket_name = <AWS bucket name>
# kinto.attachment.aws.acl = public-read

#
# Kinto signer
#
kinto.signer.resources = /buckets/main-workspace -> /buckets/main-preview -> /buckets/main
kinto.signer.to_review_enabled = true
kinto.signer.signer_backend = kinto_remote_settings.signer.backends.autograph

# Autograph credentials
# https://github.com/mozilla-services/autograph/blob/29a206fb6/autograph.yaml#L1218-L1221
kinto.signer.autograph.server_url = http://autograph:8000
kinto.signer.autograph.hawk_id = kintodev
kinto.signer.autograph.hawk_secret = 3isey64n25fim18chqgewirm6z2gwva1mas0eu71e9jtisdwv6bd

#
# Kinto emailer
#
mail.default_sender = kinto@restmail.net
mail.debug_mailer = true
mail.queue_path = mail/
# mail.host = localhost
# mail.port = 25
# mail.username = None
# mail.password = None
# mail.tls = False
# mail.ssl = False
# mail.keyfile = None
# mail.certfile = None
# mail.debug = 0
# mail.sendmail_app = /usr/sbin/sendmail
# mail.sendmail_template = {sendmail_app} -t -i -f {sender}


[uwsgi]
wsgi-file = app.wsgi
enable-threads = true
# socket = /var/run/uwsgi/kinto.sock
socket = /tmp/kinto.sock
chmod-socket = 666
processes =  1
master = true
module = kinto
harakiri = 120
uid = 10001
gid = 10001
lazy = true
lazy-apps = true
single-interpreter = true
buffer-size = 65535
post-buffering = 65535
enable-metrics = true
plugin = dogstatsd

#
# Logging configuration
#

[loggers]
keys = root

[handlers]
keys = console, sentry

[formatters]
keys = generic, json

[logger_root]
handlers = console, sentry

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = INFO
formatter = json

[handler_sentry]
class = raven.handlers.logging.SentryHandler
args = ('https://<key>:<secret>@app.getsentry.com/<project>',)
level = ERROR
formatter = generic

[formatter_json]
class = kinto.core.JsonLogFormatter

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
