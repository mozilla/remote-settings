# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2.1
aliases:
  - &restore_deps_cache
      name: Restoring Python dependency cache
      key: v2-requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}

  - &save_deps_cache
      name: Saving Python dependency cache
      key: v2-requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
      paths:
        - /home/circleci/.cache/pip

jobs:
  build_and_publish:
    machine:
      image: ubuntu-2004:202111-01
      docker_layer_caching: true

    working_directory: ~/kinto-dist

    environment:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - run:
          name: Install essential packages
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl git openssh-client libpq-dev

      - checkout

      - run:
          name: Create version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/main/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            $(cat VERSION) \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build
          command: make build

      - run:
          name: Push to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              ./bin/deploy-dockerhub.sh latest
            fi
            if [ -n "${CIRCLE_TAG}" ]; then
              ./bin/deploy-dockerhub.sh "$CIRCLE_TAG"
            fi

  integration_test:
    machine:
      image: ubuntu-2004:202111-01
      docker_layer_caching: true
    working_directory: ~/kinto-dist
    environment:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      BUILDKIT_PROGRESS: plain
    steps:
      - run:
          name: Install essential packages
          command: |
            sudo apt-get update
            sudo apt-get install -y libpq-dev

      - checkout

      - run:
          name: Set Python Version
          command: |
            python3 --version
            pyenv global 3.9.7

      - run:
          name: Set hosts
          command: |
            echo 127.0.0.1 localhost | sudo tee -a /etc/hosts
            cat /etc/hosts

      - run:
          name: Build
          command: make build

      - run:
          name: Setup env
          command: |
            mkdir mail
            sudo chmod 777 mail

      - run:
          name: Integration Test
          command: make integration-test

      - store_artifacts:
          path: integration-test.html

  unit_test:
    docker:
      - image: cimg/python:3.9
      - image: circleci/postgres:12.8-bullseye-ram
        environment:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - restore_cache: *restore_deps_cache
      - run:
          name: Run kinto_remote_settings plugin unit tests
          command: make test
      - save_cache: *save_deps_cache
  lint_format:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - restore_cache: *restore_deps_cache
      - run:
          name: Check linting and formatting
          command: make lint
      - save_cache: *save_deps_cache
  docs_test:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - restore_cache: *restore_deps_cache
      - run:
          name: Check documentation build
          command: make docs
      - save_cache: *save_deps_cache


workflows:
  version: 2
  main:
    jobs:
      - lint_format
      - docs_test
      - integration_test:
          requires:
            - lint_format
      - unit_test:
          requires:
            - lint_format
      - build_and_publish:
          requires:
            - docs_test
            - unit_test
            - integration_test
          filters:
            tags:
              only: /.*/
